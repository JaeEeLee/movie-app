{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","baseon","App","state","movies","_renderMovies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","this","Axios","get","then","json","data","catch","error","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mWAgCA,SAASA,EAAT,GAAmC,IAAbC,EAAY,EAAZA,OAAOC,EAAK,EAALA,IAC3B,OACE,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAIpD,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACM,0BAAMF,UAAU,gBAAgBE,GAsB7BC,MAvDf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACrC,OACI,yBAAKL,UAAU,SACT,yBAAKA,UAAU,iBACf,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAElC,yBAAKC,UAAU,iBACT,4BAAKD,GACL,yBAAKC,UAAU,iBACRI,EAAOE,KAAI,SAACJ,EAAMK,GAAP,OAAiB,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAElE,yBAAKP,UAAU,mBACT,kBAAC,IAAD,CACMS,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,OAAO,gB,iBC6CtBC,E,2MA5DZC,MAAO,CACLC,OAAS,I,EAWZC,cAAgB,WAUd,OATe,EAAKF,MAAMC,OAAOV,KAAI,SAAAY,GAEjC,OAAO,kBAAC,EAAD,CAAOnB,MAAOmB,EAAMC,cACbvB,OAAQsB,EAAME,mBACdZ,IAAKU,EAAMG,GACXjB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAMpCiB,W,sBAAa,4BAAAC,EAAA,sEAEU,EAAKC,WAFf,OAELR,EAFK,OAGX,EAAKS,SAAS,CACZT,WAJS,2C,mFArBVU,KAAKJ,e,iCAsCN,OAAOK,IAAMC,IARE,0BASZC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKA,KAAKf,UAC5BgB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAKR,IACIjB,EAAWU,KAAKX,MAAhBC,OACZ,OACE,yBAAKhB,UAAWgB,EAAS,MAAQ,gBAC/BU,KAAKX,MAAMC,OAASU,KAAKT,gBAAkB,e,GA1DjCmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkB,c","file":"static/js/main.31404ba3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './movie.css';\nimport LinesElipsis from 'react-lines-ellipsis';\n\n//class 대신 functional Component 사용\n\nfunction Movie({title, poster, genres, synopsis}){\n  return (\n      <div className=\"Movie\">\n            <div className=\"Movie__Column\"> \n            <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\"> \n                  <h2>{title}</h2>\n                  <div className=\"Movie__Genres\">\n                        {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                  </div>\n                  <div className=\"Movie__Synopsis\">\n                        <LinesElipsis\n                              text={synopsis}\n                              maxLine='3'\n                              ellipsis='...'\n                              trimRight\n                              baseon='letters'\n                        />\n                  </div>\n            </div>\n      </div>\n  )\n}\n\nfunction MoviePoster({poster,alt}){\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n  }\n\n  function MovieGenre({genre}){\n      return (\n            <span className=\"Movie__Genre\">{genre}</span>\n      )\n}\n  \n  //부모 컴포넌트가 string인지 아닌지 체크\n      Movie.propTypes = {\n            title   : PropTypes.string.isRequired,\n            poster  : PropTypes.string.isRequired,\n            genres  : PropTypes.array.isRequired,\n            synopsis: PropTypes.string.isRequired\n      }\n\n      MoviePoster.propTypes = {\n            poster : PropTypes.string.isRequired,\n            alt    : PropTypes.string.isRequired\n      }\n      \n      MovieGenre.propTypes = {\n            genre : PropTypes.string.isRequired\n      }\n\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\nimport Axios from 'axios';\n\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Updaste componentWillReceiveProps() -> shouldComponentUpdate() -> componentWiilUpldate() -> render() -> componentDidUpdate()\n\n   state ={\n     movies : []\n   }\n   componentDidMount(){\n     this._getMovies();\n    }\n/**\n * Promise\n * javascript concept\n * 비동기 프로그래밍이 가능. \n */\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      //component의 key를 인덱스로 사용하는 것은 느리기때문에 지양하는 방법\n        return <Movie title={movie.title_english}\n                      poster={movie.medium_cover_image}\n                      key={movie.id}\n                      genres={movie.genres}\n                      synopsis={movie.synopsis}\n                      />\n      })\n    return movies;\n  }\n\n  _getMovies = async () => {\n    //async랑 await는 짝꿍!\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi() {\n    const apiUrl = 'dummy/list_movies.json';\n  /* //  CORS 공부할것..\n  const url = 'https://yts.ag/api/v2/list_movies.json?sort_by=rating';\n   fetch(url)\n     .then(res => res.json())\n     .then(json => console.log(json))\n     .catch(err => console.log(err));\n     */\n    return Axios.get(apiUrl)\n      .then(json => json.data.data.movies)\n      .catch(error => {\n        console.log(error);\n      })\n  }\n \n\n  render() {\n        const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n       {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}